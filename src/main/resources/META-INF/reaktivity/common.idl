/*
 * Copyright 2016-2017 The Reaktivity Project
 *
 * The Reaktivity Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
scope common
{
    scope control
    {
        struct Frame
        {
            int64 correlationId;
        }

        struct Error extends common::control::Frame [0x40000000]
        {
        }


        struct Bind extends common::control::Frame [0x00000001]
        {
            int8 kind; // [SERVER (0x10) | CLIENT (0x20)] ORed [INITIAL (0x01) | REPLY (0x02)]
        }

        struct Bound extends common::control::Frame [0x40000001]
        {
            int64 referenceId;
        }

        struct Unbind extends common::control::Frame [0x00000002]
        {
            int64 referenceId;
        }

        struct Unbound extends common::control::Frame [0x40000002]
        {
        }

        struct Route extends common::control::Frame [0x00000011]
        {
            string source;
            int64 sourceRef;
            string target;
            int64 targetRef;
            octets extension;
        }

        struct Routed extends common::control::Frame [0x40000011]
        {
        }

        struct Unroute extends common::control::Frame [0x00000012]
        {
            string source;
            int64 sourceRef;
            string target;
            int64 targetRef;
            octets extension;
        }

        struct Unrouted extends common::control::Frame [0x40000012]
        {
        }

        struct Reject extends common::control::Frame [0x00000013]
        {
            string source;
            int64 sourceRef;
            string target;
            int64 targetRef;
            octets extension;
        }

        struct Rejected extends common::control::Frame [0x40000013]
        {
        }

        struct Unreject extends common::control::Frame [0x00000014]
        {
            string source;
            int64 sourceRef;
            string target;
            int64 targetRef;
            octets extension;
        }

        struct Unrejected extends common::control::Frame [0x40000014]
        {
        }


        struct Connect extends common::control::Frame [0x00000021]
        {
            int64 referenceId;
        }

        struct Connected extends common::control::Frame [0x40000021]
        {
            int64 streamId;
        }
    }

    scope stream
    {
        struct Frame
        {
            int64 streamId;
        }

        struct Begin extends common::stream::Frame [0x00000001]
        {
            int64 referenceId;
            int64 correlationId;
            octets extension;
        }

        struct Data extends common::stream::Frame [0x00000002]
        {
            octets payload;
            octets extension;
        }

        struct End extends common::stream::Frame [0x00000003]
        {
            octets extension;
        }

        struct Reset extends common::stream::Frame [0x40000001]
        {
        }

        struct Window extends common::stream::Frame [0x40000002]
        {
            int32 update;
        }
    }
}
